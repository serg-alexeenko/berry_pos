# Berry POS - Правила розробки

## Загальні принципи

### Архітектурні принципи
- Дотримуватися SOLID принципів
- Використовувати мікросервісну архітектуру
- Забезпечувати масштабованість та гнучкість
- Пріоритет безпеки та продуктивності

### Кодування
- Використовувати TypeScript для типізації
- Дотримуватися ESLint + Prettier
- Писати тести для критичного функціоналу
- Документувати API та ключові функції

### Структура проєкту
```
berry_pos/
├── docs/                    # Документація
├── backend/                 # Backend сервіси
│   ├── auth-service/       # Сервіс аутентифікації
│   ├── pos-service/        # POS сервіс
│   ├── inventory-service/  # Сервіс запасів
│   └── analytics-service/  # Сервіс аналітики
├── frontend/               # Frontend додатки
│   ├── admin-panel/        # Адміністративна панель
│   ├── pos-interface/      # POS інтерфейс
│   └── mobile-app/         # Мобільний додаток
├── shared/                 # Спільні ресурси
│   ├── types/             # TypeScript типи
│   ├── utils/             # Утиліти
│   └── constants/         # Константи
└── infrastructure/        # Інфраструктура
    ├── docker/            # Docker конфігурації
    ├── k8s/               # Kubernetes манифести
    └── terraform/         # Terraform конфігурації
```

## Технологічний стек

### Backend
- **Runtime**: Node.js 18+
- **Framework**: Express.js / Fastify
- **Database**: PostgreSQL 15+
- **Cache**: Redis 7+
- **ORM**: Prisma
- **Validation**: Joi
- **Testing**: Jest + Supertest

### Frontend
- **Framework**: React 18+ з TypeScript
- **State Management**: Redux Toolkit
- **UI Library**: Material-UI / Mantine
- **Build Tool**: Vite
- **Testing**: Jest + React Testing Library

### Mobile
- **Framework**: React Native
- **Navigation**: React Navigation
- **State Management**: Redux Toolkit
- **Testing**: Jest + Detox

### Infrastructure
- **Containerization**: Docker
- **Orchestration**: Kubernetes
- **CI/CD**: GitHub Actions
- **Monitoring**: Prometheus + Grafana
- **Logging**: ELK Stack

## Стандарти кодування

### TypeScript
```typescript
// Використовувати строгу типізацію
interface User {
  id: string;
  email: string;
  role: UserRole;
  createdAt: Date;
}

// Використовувати enum для констант
enum UserRole {
  ADMIN = 'admin',
  MANAGER = 'manager',
  CASHIER = 'cashier'
}

// Використовувати generics для утиліт
function createApiResponse<T>(data: T, success: boolean = true): ApiResponse<T> {
  return { data, success, timestamp: new Date() };
}
```

### API Design
```typescript
// RESTful endpoints
GET    /api/v1/users          // Отримати список користувачів
POST   /api/v1/users          // Створити користувача
GET    /api/v1/users/:id      // Отримати користувача
PUT    /api/v1/users/:id      // Оновити користувача
DELETE /api/v1/users/:id      // Видалити користувача

// GraphQL для складних запитів
type Query {
  users(filter: UserFilter): [User!]!
  user(id: ID!): User
}
```

### Error Handling
```typescript
// Централізована обробка помилок
class AppError extends Error {
  constructor(
    public statusCode: number,
    public message: string,
    public isOperational: boolean = true
  ) {
    super(message);
    Error.captureStackTrace(this, this.constructor);
  }
}

// Middleware для обробки помилок
app.use((error: AppError, req: Request, res: Response, next: NextFunction) => {
  const statusCode = error.statusCode || 500;
  const message = error.message || 'Internal Server Error';
  
  res.status(statusCode).json({
    success: false,
    error: message,
    ...(process.env.NODE_ENV === 'development' && { stack: error.stack })
  });
});
```

## Безпека

### Аутентифікація
- JWT токени з коротким терміном дії
- Refresh tokens для оновлення
- Rate limiting для API endpoints
- CORS налаштування

### Валідація
```typescript
// Валідація вхідних даних
const userSchema = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().min(8).required(),
  role: Joi.string().valid(...Object.values(UserRole)).required()
});

// Middleware для валідації
const validate = (schema: Joi.Schema) => {
  return (req: Request, res: Response, next: NextFunction) => {
    const { error } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        success: false,
        error: error.details[0].message
      });
    }
    next();
  };
};
```

### Шифрування
- AES-256 для чутливих даних
- bcrypt для хешування паролів
- HTTPS для всіх з'єднань
- Secure headers

## Тестування

### Unit Tests
```typescript
// Приклад unit тесту
describe('UserService', () => {
  it('should create user with valid data', async () => {
    const userData = {
      email: 'test@example.com',
      password: 'password123',
      role: UserRole.CASHIER
    };
    
    const user = await userService.createUser(userData);
    
    expect(user.email).toBe(userData.email);
    expect(user.role).toBe(userData.role);
    expect(user.password).not.toBe(userData.password); // Хешований
  });
});
```

### Integration Tests
```typescript
// Приклад integration тесту
describe('User API', () => {
  it('should create user via API', async () => {
    const response = await request(app)
      .post('/api/v1/users')
      .send({
        email: 'test@example.com',
        password: 'password123',
        role: UserRole.CASHIER
      });
    
    expect(response.status).toBe(201);
    expect(response.body.success).toBe(true);
    expect(response.body.data.email).toBe('test@example.com');
  });
});
```

## Документація

При будь-яких змінах у проєкті спочатку актуалізуй документацію, а вже потім переходь до наступного кроку розробки. Це дозволить уникнути втрати контексту та забезпечить більш послідовний і контрольований процес розробки.

## Режими роботи

1. **Auto-режим** (для простих задач)
   - Використовуй Auto для:
     - дрібних правок у коді;
     - оновлення changelog.md і tasktracker.md після невеликих змін;
     - форматування та найпростіших функцій;
     - опису змін у 1–3 речення.
   - Працюй лише з виділеними фрагментами коду, не завантажуй весь проєкт у контекст.

2. **Топові моделі (GPT-4.1 / Claude Sonnet)** (для складних задач)
   - Використовуй лише коли:
     - потрібно розробити або змінити складний компонент/модуль;
     - потрібне глибоке code review;
     - треба оптимізувати велику кількість коду;
     - є складна інтеграція з API або базами даних;
     - треба запропонувати кілька архітектурних рішень із порівнянням.
   - Перед запуском уточнюй, чи використовувати топову модель.

## Архітектура проєкту

### Frontend Architecture

- **Framework**: **Next.js 14** (App Router) з TypeScript
- **Rendering**: Hybrid — SSR (Server-Side Rendering) + SSG (Static Site Generation) для оптимізації швидкодії
- **Routing**: Вбудований у Next.js, підтримка dynamic routes та API routes
- **State Management**: **TanStack Query** (React Query) для управління серверним станом + локальний стан через **Zustand**
- **UI Framework**: **Radix UI** primitives + **shadcn/ui** компоненти
- **Styling**: Tailwind CSS з кастомною бізнес-тематичною палітрою + CSS Variables для темізації
- **Form Management**: **React Hook Form** з **Zod** валідацією
- **Optimizations**: Image optimization через `next/image`, автоматичний код-сплітинг, префетчинг сторінок

---

### Backend Architecture

- **Runtime**: **Next.js API Routes** (Edge Functions де можливо) або **Node.js** з Express.js (якщо потрібні окремі мікросервіси)
- **Language**: TypeScript з ES Modules
- **Database**: **PostgreSQL** (Neon serverless)
- **ORM**: **Drizzle ORM** для типобезпечних запитів
- **Authentication**: **Supabase Auth** з підтримкою OAuth/Social Login
- **Session Storage**: Supabase Session Management
- **Caching**: Edge caching через Vercel + React Query cache
- **API**: REST + готовність до GraphQL (при потребі)

---

###  UI/UX Design

- **Responsive Design**: Mobile-first з оптимізацією під десктоп
- **Component Library**: Єдина дизайн-система на базі Radix UI
- **Business Theming**: Кастомна кольорова схема під бізнес-додатки
- **Real-time Updates**: WebSockets / SSE для живого оновлення даних
- **Accessibility**: Відповідність WCAG 2.1 AA, aria-labels, keyboard navigation
- **Animations**: Framer Motion для плавних переходів та інтеракцій

### API Documentation
- Swagger/OpenAPI для REST endpoints
- GraphQL Playground для GraphQL
- JSDoc для функцій та класів
- README для кожного сервісу

### Code Comments
```typescript
/**
 * Створює нового користувача в системі
 * @param userData - Дані користувача для створення
 * @param options - Додаткові опції (хешування паролю, валідація)
 * @returns Promise<User> - Створений користувач
 * @throws {AppError} - Якщо email вже існує або дані невалідні
 */
async function createUser(
  userData: CreateUserDto,
  options: CreateUserOptions = {}
): Promise<User> {
  // Реалізація
}
```

## Git Workflow

### Branching Strategy
- `main` - продакшн код
- `develop` - розробка
- `feature/*` - нові функції
- `hotfix/*` - критичні виправлення
- `release/*` - підготовка релізів

### Commit Messages
```
feat: додати систему аутентифікації
fix: виправити помилку валідації email
docs: оновити API документацію
test: додати тести для UserService
refactor: рефакторинг структури бази даних
```

## Performance

### Оптимізація
- Кешування з Redis
- Database indexing
- Lazy loading для компонентів
- Code splitting для бандлів
- CDN для статичних ресурсів

### Monitoring
- Response time метрики
- Error rate моніторинг
- Database performance
- Memory usage
- CPU utilization

## Deployment

### Environments
- `development` - локальна розробка
- `staging` - тестування
- `production` - продакшн

### CI/CD Pipeline
1. Code linting та тестування
2. Build артефактів
3. Security scanning
4. Deployment в staging
5. Automated testing
6. Deployment в production

## Команди

### Розробка
```bash
# Backend
npm run dev          # Запуск в режимі розробки
npm run build        # Збірка
npm run test         # Запуск тестів
npm run lint         # Лінтінг

# Frontend
npm run dev          # Запуск dev сервера
npm run build        # Збірка для продакшену
npm run test         # Запуск тестів
npm run preview      # Прев'ю збірки
```

### Docker
```bash
docker-compose up -d    # Запуск всіх сервісів
docker-compose down     # Зупинка сервісів
docker-compose logs     # Перегляд логів
```

### Kubernetes
```bash
kubectl apply -f k8s/   # Розгортання
kubectl get pods        # Статус подів
kubectl logs -f         # Логи
```

## Важливі зауваження

1. **Безпека перш за все** - всі зміни повинні проходити security review
2. **Тестування обов'язкове** - новий функціонал повинен мати тести
3. **Документація актуальна** - оновлювати документацію разом з кодом
4. **Code review** - всі зміни повинні проходити review
5. **Performance** - моніторити продуктивність на кожному етапі

---

**Останнє оновлення**: 2024-12-19  
**Версія**: 2.0
