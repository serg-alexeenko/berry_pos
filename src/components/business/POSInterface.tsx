/**
 * @file: components/business/POSInterface.tsx
 * @description: POS —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
 * @dependencies: React, Supabase, UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
 * @created: 2024-12-19
 */

'use client'

import React, { useState, useEffect, useCallback, useMemo } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Separator } from '@/components/ui/separator'
import { Search, ShoppingCart, User, CreditCard, Receipt, Plus, Minus, X } from 'lucide-react'
import { useSupabase } from '@/hooks/useSupabase'
import { Product, Category, Customer, CartItem, OrderStatus, PaymentMethod } from '@/lib/supabase/types'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤ —Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –æ–ø–ª–∞—Ç–∏
const ORDER_STATUSES: OrderStatus[] = [
  { value: 'new', label: '–ù–æ–≤–∏–π', color: 'bg-blue-500' },
  { value: 'processing', label: '–í –æ–±—Ä–æ–±—Ü—ñ', color: 'bg-yellow-500' },
  { value: 'ready', label: '–ì–æ—Ç–æ–≤–æ', color: 'bg-green-500' },
  { value: 'completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', color: 'bg-gray-500' },
  { value: 'cancelled', label: '–°–∫–∞—Å–æ–≤–∞–Ω–æ', color: 'bg-red-500' }
]

const PAYMENT_METHODS: PaymentMethod[] = [
  { value: 'cash', label: '–ì–æ—Ç—ñ–≤–∫–∞', icon: 'üíµ' },
  { value: 'card', label: '–ö–∞—Ä—Ç–∞', icon: 'üí≥' },
  { value: 'online', label: '–û–Ω–ª–∞–π–Ω', icon: 'üåê' }
]

export default function POSInterface() {
  const { supabase } = useSupabase()
  
  // –°—Ç–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [products, setProducts] = useState<Product[]>([])
  const [categories, setCategories] = useState<Category[]>([])
  const [customers, setCustomers] = useState<Customer[]>([])
  const [cart, setCart] = useState<CartItem[]>([])
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('products')
  const [showCustomerModal, setShowCustomerModal] = useState(false)
  const [newCustomerData, setNewCustomerData] = useState({ name: '', phone: '', email: '', address: '' })

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  useEffect(() => {
    loadData()
  }, [])

  const loadData = async () => {
    try {
      setIsLoading(true)
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
      const { data: productsData, error: productsError } = await supabase
        .from('products')
        .select('*')
        .order('name')
      
      if (productsError) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:', productsError)
        throw productsError
      }
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
      const { data: categoriesData, error: categoriesError } = await supabase
        .from('categories')
        .select('*')
        .order('name')
      
      if (categoriesError) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:', categoriesError)
        throw categoriesError
      }
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–º–æ–∂–µ –Ω–µ —ñ—Å–Ω—É–≤–∞—Ç–∏ —â–µ)
      let customersData = []
      try {
        const { data: customers, error: customersError } = await supabase
          .from('customers')
          .select('*')
          .order('name')
        
        if (customersError) {
          console.warn('–¢–∞–±–ª–∏—Ü—è customers —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞:', customersError.message)
        } else {
          customersData = customers || []
        }
      } catch (customersError) {
        console.warn('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ (—Ç–∞–±–ª–∏—Ü—è –º–æ–∂–µ –Ω–µ —ñ—Å–Ω—É–≤–∞—Ç–∏):', customersError)
        customersData = []
      }
      
      setProducts(productsData || [])
      setCategories(categoriesData || [])
      setCustomers(customersData)
      
      console.log('–î–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', {
        products: productsData?.length || 0,
        categories: categoriesData?.length || 0,
        customers: customersData?.length || 0
      })
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error)
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –º–∞—Å–∏–≤–∏ —è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞
      setProducts([])
      setCategories([])
      setCustomers([])
    } finally {
      setIsLoading(false)
    }
  }

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
  const filteredProducts = useMemo(() => {
    let filtered = products
    
    // –§—ñ–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(product => product.category_id === selectedCategory)
    }
    
    // –§—ñ–ª—å—Ç—Ä –ø–æ –ø–æ—à—É–∫—É
    if (searchQuery) {
      const query = searchQuery.toLowerCase()
      filtered = filtered.filter(product => 
        product.name.toLowerCase().includes(query) ||
        product.sku.toLowerCase().includes(query) ||
        product.description?.toLowerCase().includes(query)
      )
    }
    
    return filtered
  }, [products, selectedCategory, searchQuery])

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = useCallback((product: Product) => {
    const existingItem = cart.find(item => item.product_id === product.id)
    
    if (existingItem) {
      setCart(cart.map(item => 
        item.product_id === product.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ))
    } else {
      const category = categories.find(cat => cat.id === product.category_id)
      const newItem: CartItem = {
        product_id: product.id,
        name: product.name,
        price: product.price,
        quantity: 1,
        image_url: product.image_url,
        category_name: category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
      }
      setCart([...cart, newItem])
    }
  }, [cart, categories])

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤ –∫–æ—Ä–∑–∏–Ω—ñ
  const updateQuantity = useCallback((productId: string, newQuantity: number) => {
    if (newQuantity <= 0) {
      setCart(cart.filter(item => item.product_id !== productId))
    } else {
      setCart(cart.map(item => 
        item.product_id === productId 
          ? { ...item, quantity: newQuantity }
          : item
      ))
    }
  }, [cart])

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –∫–æ—Ä–∑–∏–Ω–∏
  const removeFromCart = useCallback((productId: string) => {
    setCart(cart.filter(item => item.product_id !== productId))
  }, [cart])

  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
  const totalAmount = useMemo(() => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0)
  }, [cart])

  // –û—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏
  const clearCart = useCallback(() => {
    setCart([])
    setSelectedCustomer(null)
  }, [])

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const createOrder = async () => {
    if (cart.length === 0) return
    
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è orders
      let orderCreated = false
      let orderNumber = `DEMO-${Date.now()}`
      
      try {
        // –û—Ç—Ä–∏–º—É—î–º–æ business_id –∑ –ø–µ—Ä—à–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É
        const { data: businessData, error: businessError } = await supabase
          .from('businesses')
          .select('id')
          .limit(1)
          .single()
        
        if (businessError || !businessData) {
          console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ business_id:', businessError?.message)
          throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ business_id')
        }
        
        // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const generateOrderNumber = () => {
          const timestamp = Date.now()
          const random = Math.floor(Math.random() * 1000)
          return `ORD-${timestamp}-${random}`
        }
        
        let orderNumber = generateOrderNumber()
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 5 —Å–ø—Ä–æ–±)
        let isUnique = false
        for (let i = 0; i < 5; i++) {
          const { count } = await supabase
            .from('orders')
            .select('*', { count: 'exact', head: true })
            .eq('order_number', orderNumber)
          
          if (count === 0) {
            isUnique = true
            break // –ù–æ–º–µ—Ä —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
          }
          orderNumber = generateOrderNumber() // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π
        }
        
        if (!isUnique) {
          console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
          orderNumber = `ORD-${Date.now()}-${Math.floor(Math.random() * 10000)}` // –§—ñ–Ω–∞–ª—å–Ω–∞ —Å–ø—Ä–æ–±–∞
        }
        
        console.log('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–∞–Ω–∏–º–∏:', {
          business_id: businessData.id,
          customer_id: selectedCustomer?.id || null,
          order_number: orderNumber,
          total_amount: totalAmount,
          final_amount: totalAmount
        })
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const { data: order, error: orderError } = await supabase
          .from('orders')
          .insert({
            business_id: businessData.id,
            customer_id: selectedCustomer?.id || null,
            order_number: orderNumber,
            total_amount: totalAmount,
            final_amount: totalAmount,
            status: 'new',
            payment_status: 'pending'
          })
          .select()
          .single()
        
        if (orderError) {
          console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', orderError)
          if (orderError.message.includes('order_number')) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderError.message}`)
          } else if (orderError.message.includes('business_id')) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ business_id: ${orderError.message}`)
          } else {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderError.message}`)
          }
        }
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        const orderItems = cart.map(item => ({
          order_id: order.id,
          product_id: item.product_id,
          quantity: item.quantity,
          unit_price: item.price,
          total_price: item.price * item.quantity
        }))
        
        const { error: itemsError } = await supabase
          .from('order_items')
          .insert(orderItems)
        
        if (itemsError) {
          console.warn('–¢–∞–±–ª–∏—Ü—è order_items —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞:', itemsError.message)
          throw new Error('–¢–∞–±–ª–∏—Ü—è order_items —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞')
        }
        
        orderCreated = true
        // orderNumber –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–∏—â–µ
        
      } catch (tableError) {
        console.warn('–î–µ–º–æ —Ä–µ–∂–∏–º - —Ç–∞–±–ª–∏—Ü—ñ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ:', tableError)
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º—ñ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      }
      
      // –û—á–∏—â–µ–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
      clearCart()
      
      if (orderCreated) {
        alert(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumber} —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`)
      } else {
        alert(`–î–µ–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ! (–¢–∞–±–ª–∏—Ü—ñ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ)\n–°—É–º–∞: ${totalAmount.toFixed(2)} ‚Ç¥\n–¢–æ–≤–∞—Ä—ñ–≤: ${cart.reduce((sum, item) => sum + item.quantity, 0)}`)
      }
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', error)
      alert('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    }
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
  const createCustomer = async (customerData: { name: string; phone: string; email?: string; address?: string }) => {
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ business_id –∑ –ø–µ—Ä—à–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É
      const { data: businessData, error: businessError } = await supabase
        .from('businesses')
        .select('id')
        .limit(1)
        .single()
      
      if (businessError || !businessData) {
        console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ business_id:', businessError?.message)
        throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ business_id')
      }
      
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
      const { data: customer, error: customerError } = await supabase
        .from('customers')
        .insert({
          business_id: businessData.id,
          name: customerData.name,
          phone: customerData.phone,
          email: customerData.email || null,
          address: customerData.address || null
        })
        .select()
        .single()
      
      if (customerError) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', customerError)
        throw customerError
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
      setCustomers(prev => [...prev, customer])
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —è–∫ –≤–∏–±—Ä–∞–Ω–æ–≥–æ
      setSelectedCustomer(customer)
      
      return customer
      
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞:', error)
      throw error
    }
  }

  // –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
  const handleCreateCustomer = async () => {
    if (!newCustomerData.name || !newCustomerData.phone) {
      alert('–Ü–º\'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ!')
      return
    }
    
    try {
      await createCustomer(newCustomerData)
      setShowCustomerModal(false)
      setNewCustomerData({ name: '', phone: '', email: '', address: '' })
      alert('–ö–ª—ñ—î–Ω—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!')
    } catch (error) {
      alert('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞')
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-lg">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
      </div>
    )
  }

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white border-b px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">POS –°–∏—Å—Ç–µ–º–∞</h1>
            <p className="text-gray-600">–®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å</p>
          </div>
          <div className="text-right">
            <div className="text-sm text-gray-500">
              <div>–¢–æ–≤–∞—Ä—ñ–≤: {products.length}</div>
              <div>–ö–∞—Ç–µ–≥–æ—Ä—ñ–π: {categories.length}</div>
              <div>–ö–ª—ñ—î–Ω—Ç—ñ–≤: {customers.length}</div>
            </div>
          </div>
        </div>
      </div>

      <div className="flex-1 flex overflow-hidden">
        {/* –õ—ñ–≤–∞ –ø–∞–Ω–µ–ª—å - –¢–æ–≤–∞—Ä–∏ */}
        <div className="flex-1 flex flex-col">
          {/* –ü–æ—à—É–∫ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∏ */}
          <div className="bg-white p-4 border-b">
            <div className="flex gap-4 mb-4">
              <div className="flex-1 relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="–ü–æ—à—É–∫ —Ç–æ–≤–∞—Ä—ñ–≤..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-3 py-2 border rounded-md"
              >
                <option value="all">–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</option>
                {categories.map(category => (
                  <option key={category.id} value={category.id}>
                    {category.name}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ */}
          <div className="flex-1 overflow-y-auto p-4">
            {products.length === 0 ? (
              <div className="text-center text-gray-500 py-8">
                <div className="text-gray-400 text-6xl mb-4">üì¶</div>
                <h3 className="text-lg font-medium mb-2">–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                <p className="text-sm mb-4">–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–µ–Ω—é –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏</p>
                <Button 
                  variant="outline" 
                  onClick={() => window.location.href = '/menu/products'}
                >
                  –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–æ–≤–∞—Ä–∞–º–∏
                </Button>
              </div>
            ) : filteredProducts.length === 0 ? (
              <div className="text-center text-gray-500 py-8">
                <Search className="h-12 w-12 mx-auto mb-2 text-gray-300" />
                <h3 className="text-lg font-medium mb-2">–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
                <p className="text-sm">–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –∞–±–æ —Ñ—ñ–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</p>
              </div>
            ) : (
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {filteredProducts.map(product => (
                  <Card 
                    key={product.id} 
                    className="cursor-pointer hover:shadow-md transition-shadow"
                    onClick={() => addToCart(product)}
                  >
                    <CardContent className="p-4">
                      <div className="aspect-square bg-gray-100 rounded-md mb-3 flex items-center justify-center">
                        {product.image_url ? (
                          <img 
                            src={product.image_url} 
                            alt={product.name}
                            className="w-full h-full object-cover rounded-md"
                          />
                        ) : (
                          <div className="text-gray-400 text-4xl">üì¶</div>
                        )}
                      </div>
                      <h3 className="font-medium text-sm mb-1 truncate">{product.name}</h3>
                      <p className="text-lg font-bold text-green-600">
                        {product.price.toFixed(2)} ‚Ç¥
                      </p>
                      <p className="text-xs text-gray-500">
                        {categories.find(cat => cat.id === product.category_id)?.name}
                      </p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å - –ö–æ—Ä–∑–∏–Ω–∞ */}
        <div className="w-96 bg-white border-l flex flex-col">
          <CardHeader className="border-b">
            <CardTitle className="flex items-center gap-2">
              <ShoppingCart className="h-5 w-5" />
              –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            </CardTitle>
          </CardHeader>

          <CardContent className="flex-1 flex flex-col p-0">
            {/* –í–∏–±—ñ—Ä –∫–ª—ñ—î–Ω—Ç–∞ */}
            <div className="p-4 border-b">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4 text-gray-500" />
                  <span className="text-sm font-medium">–ö–ª—ñ—î–Ω—Ç</span>
                </div>
                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => setShowCustomerModal(true)}
                  className="h-6 px-2 text-xs"
                >
                  <Plus className="h-3 w-3 mr-1" />
                  –ù–æ–≤–∏–π
                </Button>
              </div>
              <select
                value={selectedCustomer?.id || ''}
                onChange={(e) => {
                  const customer = customers.find(c => c.id === e.target.value)
                  setSelectedCustomer(customer || null)
                }}
                className="w-full px-3 py-2 border rounded-md"
              >
                <option value="">–ë–µ–∑ –∫–ª—ñ—î–Ω—Ç–∞</option>
                {customers.length === 0 ? (
                  <option value="" disabled>–ö–ª—ñ—î–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</option>
                ) : (
                  customers.map(customer => (
                    <option key={customer.id} value={customer.id}>
                      {customer.name} ({customer.phone})
                    </option>
                  ))
                )}
              </select>
              {customers.length === 0 && (
                <p className="text-xs text-gray-500 mt-1">
                  –¢–∞–±–ª–∏—Ü—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞. –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±–µ–∑ –∫–ª—ñ—î–Ω—Ç–∞.
                </p>
              )}
            </div>

            {/* –¢–æ–≤–∞—Ä–∏ –≤ –∫–æ—Ä–∑–∏–Ω—ñ */}
            <div className="flex-1 overflow-y-auto p-4">
              {cart.length === 0 ? (
                <div className="text-center text-gray-500 py-8">
                  <ShoppingCart className="h-12 w-12 mx-auto mb-2 text-gray-300" />
                  <p>–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è</p>
                  <p className="text-sm">–î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {cart.map(item => (
                    <div key={item.product_id} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                      <div className="w-12 h-12 bg-gray-200 rounded-md flex items-center justify-center">
                        {item.image_url ? (
                          <img 
                            src={item.image_url} 
                            alt={item.name}
                            className="w-full h-full object-cover rounded-md"
                          />
                        ) : (
                          <div className="text-gray-400">üì¶</div>
                        )}
                      </div>
                      
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium text-sm truncate">{item.name}</h4>
                        <p className="text-xs text-gray-500">{item.category_name}</p>
                        <p className="text-sm font-medium">{item.price.toFixed(2)} ‚Ç¥</p>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => updateQuantity(item.product_id, item.quantity - 1)}
                        >
                          <Minus className="h-3 w-3" />
                        </Button>
                        <span className="w-8 text-center text-sm">{item.quantity}</span>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => updateQuantity(item.product_id, item.quantity + 1)}
                        >
                          <Plus className="h-3 w-3" />
                        </Button>
                      </div>
                      
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeFromCart(item.product_id)}
                      >
                        <X className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* –ü—ñ–¥—Å—É–º–æ–∫ —Ç–∞ –¥—ñ—ó */}
            {cart.length > 0 && (
              <div className="border-t p-4 space-y-4">
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>–¢–æ–≤–∞—Ä—ñ–≤:</span>
                    <span>{cart.reduce((total, item) => total + item.quantity, 0)}</span>
                  </div>
                  <div className="flex justify-between text-lg font-bold">
                    <span>–ó–∞–≥–∞–ª–æ–º:</span>
                    <span className="text-green-600">{totalAmount.toFixed(2)} ‚Ç¥</span>
                  </div>
                </div>
                
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    onClick={clearCart}
                    className="flex-1"
                  >
                    –û—á–∏—Å—Ç–∏—Ç–∏
                  </Button>
                  <Button
                    onClick={createOrder}
                    className="flex-1"
                    disabled={cart.length === 0}
                  >
                    <Receipt className="h-4 w-4 mr-2" />
                    –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ */}
      {showCustomerModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-96 max-w-md">
            <h3 className="text-lg font-semibold mb-4">–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">–Ü–º'—è *</label>
                <Input
                  value={newCustomerData.name}
                  onChange={(e) => setNewCustomerData(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                <Input
                  value={newCustomerData.phone}
                  onChange={(e) => setNewCustomerData(prev => ({ ...prev, phone: e.target.value }))}
                  placeholder="+380991234567"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Email</label>
                <Input
                  type="email"
                  value={newCustomerData.email}
                  onChange={(e) => setNewCustomerData(prev => ({ ...prev, email: e.target.value }))}
                  placeholder="client@example.com"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">–ê–¥—Ä–µ—Å–∞</label>
                <Input
                  value={newCustomerData.address}
                  onChange={(e) => setNewCustomerData(prev => ({ ...prev, address: e.target.value }))}
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É"
                />
              </div>
            </div>
            
            <div className="flex gap-2 mt-6">
              <Button
                variant="outline"
                onClick={() => setShowCustomerModal(false)}
                className="flex-1"
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </Button>
              <Button
                onClick={handleCreateCustomer}
                className="flex-1"
                disabled={!newCustomerData.name || !newCustomerData.phone}
              >
                –°—Ç–≤–æ—Ä–∏—Ç–∏
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
